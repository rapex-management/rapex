# Generated by Django 5.1.2 on 2025-09-14 06:28

from django.db import migrations, models
import django.contrib.contenttypes.fields
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal


def migrate_data_forward(apps, schema_editor):
    """
    Migrate existing data to new product structure
    """
    # Get old models (using historical state)
    try:
        Product = apps.get_model('products', 'Product')
        Shop = apps.get_model('products', 'Shop')
        Category = apps.get_model('products', 'Category')
        ProductType = apps.get_model('products', 'ProductType')
        ProductImage = apps.get_model('products', 'ProductImage')
        ProductVariant = apps.get_model('products', 'ProductVariant')
        ProductTag = apps.get_model('products', 'ProductTag')
        ProductReview = apps.get_model('products', 'ProductReview')
    except LookupError:
        # If old models don't exist, skip migration
        return
    
    # Get new models
    ShopProduct = apps.get_model('products', 'ShopProduct')
    PrelovedProduct = apps.get_model('products', 'PrelovedProduct')
    ReadyToEatProduct = apps.get_model('products', 'ReadyToEatProduct')
    FreshProduct = apps.get_model('products', 'FreshProduct')
    MerchantCategory = apps.get_model('products', 'MerchantCategory')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Create merchant categories for existing categories
    category_mapping = {}
    for category in Category.objects.all():
        try:
            merchants_with_products = Shop.objects.filter(
                products__category=category
            ).select_related('merchant').distinct()
            
            for shop in merchants_with_products:
                merchant_category, created = MerchantCategory.objects.get_or_create(
                    merchant=shop.merchant,
                    name=category.name,
                    parent=None  # We'll handle hierarchy later if needed
                )
                category_mapping[f"{shop.merchant.id}_{category.category_id}"] = merchant_category
        except:
            continue
    
    # Migrate products based on type
    for product in Product.objects.all():
        try:
            common_fields = {
                'product_id': product.product_id,
                'merchant': product.shop.merchant,
                'name': product.name,
                'price': product.price,
                'markup_price': product.price * Decimal('1.1'),  # Default 10% markup
                'stock': product.stock,
                'status': product.status,
                'description': product.description,
                'sku': product.sku,
                'brand': product.brand,
                'weight': product.weight,
                'dimensions': product.dimensions,
                'created_at': product.created_at,
                'updated_at': product.updated_at,
            }
            
            # Try to find matching merchant category
            if product.category:
                category_key = f"{product.shop.merchant.id}_{product.category.category_id}"
                if category_key in category_mapping:
                    common_fields['category'] = category_mapping[category_key]
            
            # Create product based on type
            new_product = None
            if product.type.name == 0:  # Shop
                new_product = ShopProduct.objects.create(**common_fields)
            elif product.type.name == 1:  # Pre-loved
                new_product = PrelovedProduct.objects.create(
                    condition='like_new',  # Default condition
                    **common_fields
                )
            elif product.type.name == 2:  # Ready-to-Eat
                new_product = ReadyToEatProduct.objects.create(**common_fields)
            elif product.type.name == 3:  # Fresh
                new_product = FreshProduct.objects.create(
                    shelf_life_days=7,  # Default shelf life
                    **common_fields
                )
            
            if new_product:
                # Get content type for the new product
                new_content_type = ContentType.objects.get_for_model(new_product.__class__)
                
                # Update existing related models to point to new product
                ProductImage.objects.filter(product=product).update(
                    content_type=new_content_type,
                    object_id=new_product.product_id
                )
                
                ProductVariant.objects.filter(product=product).update(
                    content_type=new_content_type,
                    object_id=new_product.product_id
                )
                
                ProductTag.objects.filter(product=product).update(
                    content_type=new_content_type,
                    object_id=new_product.product_id
                )
                
                ProductReview.objects.filter(product=product).update(
                    content_type=new_content_type,
                    object_id=new_product.product_id
                )
        except Exception as e:
            print(f"Error migrating product {product.product_id}: {e}")
            continue


def migrate_data_reverse(apps, schema_editor):
    """
    Reverse migration - not implemented for safety
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('merchants', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('products', '0001_initial'),
    ]

    operations = [
        # Create MerchantCategory model
        migrations.CreateModel(
            name='MerchantCategory',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='merchants.merchant')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='products.merchantcategory')),
            ],
            options={
                'verbose_name': 'Merchant Category',
                'verbose_name_plural': 'Merchant Categories',
                'db_table': 'merchant_categories',
            },
        ),
        
        # Create ShopProduct model
        migrations.CreateModel(
            name='ShopProduct',
            fields=[
                ('product_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('markup_price', models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
                ('stock', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('out_of_stock', 'Out of Stock'), ('banned', 'Banned'), ('draft', 'Draft')], default='draft', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('sku', models.CharField(blank=True, max_length=100, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=8, null=True)),
                ('dimensions', models.JSONField(blank=True, default=dict, help_text='Length, width, height in cm')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='shopproduct_products', to='products.brand')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='shopproduct_products', to='products.merchantcategory')),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shopproduct_products', to='merchants.merchant')),
            ],
            options={
                'verbose_name': 'Shop Product',
                'verbose_name_plural': 'Shop Products',
                'db_table': 'shop_products',
            },
        ),
        
        # Create PrelovedProduct model
        migrations.CreateModel(
            name='PrelovedProduct',
            fields=[
                ('product_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('markup_price', models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
                ('stock', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('out_of_stock', 'Out of Stock'), ('banned', 'Banned'), ('draft', 'Draft')], default='draft', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('sku', models.CharField(blank=True, max_length=100, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=8, null=True)),
                ('dimensions', models.JSONField(blank=True, default=dict, help_text='Length, width, height in cm')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('condition', models.CharField(choices=[('like_new', 'Like New'), ('fairly_used', 'Fairly Used'), ('heavily_used', 'Heavily Used')], max_length=20)),
                ('usage_notes', models.TextField(blank=True, help_text='Additional notes about item usage and condition', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prelovedproduct_products', to='products.brand')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prelovedproduct_products', to='products.merchantcategory')),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prelovedproduct_products', to='merchants.merchant')),
            ],
            options={
                'verbose_name': 'Preloved Product',
                'verbose_name_plural': 'Preloved Products',
                'db_table': 'preloved_products',
            },
        ),
        
        # Create ReadyToEatProduct model
        migrations.CreateModel(
            name='ReadyToEatProduct',
            fields=[
                ('product_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('markup_price', models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
                ('stock', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('out_of_stock', 'Out of Stock'), ('banned', 'Banned'), ('draft', 'Draft')], default='draft', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('sku', models.CharField(blank=True, max_length=100, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=8, null=True)),
                ('dimensions', models.JSONField(blank=True, default=dict, help_text='Length, width, height in cm')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('menu_details', models.JSONField(blank=True, default=dict, help_text='Menu details like ingredients, allergens, etc.')),
                ('preparation_time', models.DurationField(blank=True, help_text='Time required to prepare the meal', null=True)),
                ('is_vegetarian', models.BooleanField(blank=True, null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='readytoeatproduct_products', to='products.brand')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='readytoeatproduct_products', to='products.merchantcategory')),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readytoeatproduct_products', to='merchants.merchant')),
            ],
            options={
                'verbose_name': 'Ready-to-Eat Product',
                'verbose_name_plural': 'Ready-to-Eat Products',
                'db_table': 'ready_to_eat_products',
            },
        ),
        
        # Create FreshProduct model
        migrations.CreateModel(
            name='FreshProduct',
            fields=[
                ('product_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('markup_price', models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
                ('stock', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('out_of_stock', 'Out of Stock'), ('banned', 'Banned'), ('draft', 'Draft')], default='draft', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('sku', models.CharField(blank=True, max_length=100, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=8, null=True)),
                ('dimensions', models.JSONField(blank=True, default=dict, help_text='Length, width, height in cm')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('shelf_life_days', models.PositiveIntegerField(help_text='Number of days the product stays fresh')),
                ('origin', models.CharField(blank=True, help_text='Origin/source of the fresh product', max_length=200, null=True)),
                ('storage_instructions', models.TextField(blank=True, help_text='Instructions for proper storage', null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='freshproduct_products', to='products.brand')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='freshproduct_products', to='products.merchantcategory')),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freshproduct_products', to='merchants.merchant')),
            ],
            options={
                'verbose_name': 'Fresh Product',
                'verbose_name_plural': 'Fresh Products',
                'db_table': 'fresh_products',
            },
        ),
        
        # Add content_type and object_id to ProductImage
        migrations.AddField(
            model_name='productimage',
            name='content_type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='productimage',
            name='object_id',
            field=models.UUIDField(default=uuid.uuid4),
            preserve_default=False,
        ),
        
        # Add content_type and object_id to ProductVariant
        migrations.AddField(
            model_name='productvariant',
            name='content_type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='productvariant',
            name='object_id',
            field=models.UUIDField(default=uuid.uuid4),
            preserve_default=False,
        ),
        
        # Add content_type and object_id to ProductTag  
        migrations.AddField(
            model_name='producttag',
            name='content_type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='producttag',
            name='object_id',
            field=models.UUIDField(default=uuid.uuid4),
            preserve_default=False,
        ),
        
        # Add content_type and object_id to ProductReview
        migrations.AddField(
            model_name='productreview',
            name='content_type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='productreview',
            name='object_id',
            field=models.UUIDField(default=uuid.uuid4),
            preserve_default=False,
        ),
        
        # Migrate existing data
        migrations.RunPython(migrate_data_forward, migrate_data_reverse),
        
        # Add indexes and constraints after data migration
        migrations.AlterUniqueTogether(
            name='merchantcategory',
            unique_together={('merchant', 'name', 'parent')},
        ),
        migrations.AlterUniqueTogether(
            name='productvariant',
            unique_together={('content_type', 'object_id', 'variant_name')},
        ),
        migrations.AlterUniqueTogether(
            name='producttag',
            unique_together={('content_type', 'object_id', 'tag_name')},
        ),
        migrations.AlterUniqueTogether(
            name='productreview',
            unique_together={('content_type', 'object_id', 'user_id')},
        ),
    ]
